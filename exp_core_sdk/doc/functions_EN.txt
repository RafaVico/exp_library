Excuse my english.

CONSTANTS USED BY EXP LIBRARY (exp_core).

#define EXP_ERROR 0
#define EXP_READY 1
#define EXP_COMPLETE 2

Is the value returned by the exp_init () function.
EXP_ERROR, means that there is no EXP folder or no active profile exists.
EXP_READY, means that you have loaded a profile and experiences, but there is no description of these.
           You can play without problems, but we will not see the warning messages.
EXP_COMPLETE, means that you have loaded the profile, experiences and description.

#define EXP_MAX_EXPERIENCE 50
#define EXP_MAX_POINTS 1000

The games will be limited by number of experiences and points. There will be
a maximum of 50 experiences and 1000 points per game. It's not fun to make a
game with a trillion points experience.



FUNCTIONS USED BY EXP LIBRARY

The data of the profiles, experiences, etc ... are stored in the root of the SD card, in
case of using GP2X or WIZ, or in the folder "Documents and settings / all users / program data / exp"
in case of using windows (the name may vary according to the language of windows).


int exp_init (char * author, char * game);

Initialize the library. We passed the "author" and "game" parameters, which are text strings.
author is the name of the creator (programmer, team, company ...) and game the title of the
game.

Internally: from the EXP data folder, it will read the "activeexp" file, which contains the name
of the active profile. Within the active profile folder you will create a new folder to
save the game data. The folder will be called "author_game", to avoid repetitions and
name conflicts ALL the game data will be saved in this folder.


int exp_add (int id, int value, int secret = 0);

Add an experience (or achievement) to game data. We will assign an "id" greater than 0 and a
"value" (value). If the sum of all experiences exceeds the maximum allowed, the experience will
not be saved. If it is a secret experience, the last "secret" parameter will be marked as 1.


int exp_add_desc (int id, char * name, char * desc, char * lang = NULL);

Add an experience description "id" is the experience that we are going to add. "name" is
the name of the experience, with a limit of 20 characters. "desc" is the description of the
experience, what needs to be done, etc ... The last parameter "lang" is the language of that
description. If we leave it as NULL, the language will be saved as "default". If we put
the name of the language "Spanish", "English", etc ... at the time of playing, the
messages in the default language of the EXP (profile) active, so it's convenient
put the language in multi-language games.


int exp_add_img (int id, char * img);

We assign an "img" image to the "id" experience. img is the name of the file, and you have to
keep in mind that we can put relative paths "data / images / exp01.bmp". It must be a
.bmp file of size 24x24. The transparent pixels are colored (255,0,255).


int exp_add_icon (char * img);

We add the icon of the game that will be shown among the favorite games of the EXP (profile) active.
The properties are the same as the images of the experiences.


int exp_set_lang (char * lang);

If we want to change the language of the achievements for some reason, we will do it with this function.
In "lang" we will pass the language as text string.


void exp_win (int id);

This is the main function of the library. Every time we call this function, the
experience "id" will be marked as achieved (if we did not have it yet, in that case it will not happen
absolutely nothing). The external function callback () will also be called, with the parameters
(int id, int value, char * name, char * desc), which will show the messages and
notifications.
 

char * exp_get_lang ();

Returns the language of the active EXP (profile).


char * exp_user ();

Returns the name of the active EXP (profile). Useful if you want to save in a
record table, or use it directly in a role play game ;)


int exp_get_value (int id);

Returns the value of the "id" experience. It will not be used much, but there it is, just in case.


int exp_get_won (int id);

It tells us if the "id" experience has been achieved or not.


char * exp_get_name (int id);

Returns the name of the "id" experience.


char * exp_get_desc (int id);

Returns the description of the "id" experience in the current language.


char * exp_data_path ();

Returns the game data path for the active EXP (profile). This allows us to
each profile has its own saved games that do not affect the other profiles.
Useful if the console is used by several people.


void exp_set_callback (void (* callback) (int, int, char *, char *));

Here we establish the function that will receive the callback messages generated by exp_win ().
The data that will be sent are: (int id, int value, char * name, char * desc).
"id" the id of the experience gained. Note: the system sends a warning with "id" = 0 to
indicate which EXP has logged in
"value" is the value of the experience.
"name" is the name of the experience.
"desc" is the description of the experience in the current language.

If the game is programmed in C ++ with SDL, you can use the library exp_sdl to display
these messages. This library already has this function that does all the work alone and
show the experience with a cool animation.
